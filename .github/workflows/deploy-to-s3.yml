name: 'Deploy to S3'
on:
  workflow_dispatch:
  push:
    paths:
      - packages/front/**
jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3.4.0
        with:
          skip_after_successful_duplicate: 'true'
  deploy:
    name: Deploy to S3
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Install dependencies
        run: npm ci
      - run: npm run -w front build
      - name: Load AWS resource ids
        id: aws
        run: |
          echo "CLOUDFRONT=$(aws cloudformation describe-stacks --stack-name server --query 'Stacks[0].Outputs[?OutputKey==`distributionId`].OutputValue' --output text)" >> "$GITHUB_OUTPUT"
          echo "S3=$(aws cloudformation describe-stacks --stack-name server --query 'Stacks[0].Outputs[?OutputKey==`awsBucketId`].OutputValue' --output text)" >> "$GITHUB_OUTPUT"
      - name: Copy files to the production website with the AWS CLI
        id: aws_s3_sync
        run: |
          output=$(aws s3 sync ./packages/front/dist s3://${{  steps.aws.outputs.S3 }})
      - name: Upload changes to S3 and issue Cloudfront invalidations
        uses: vladcosorg/action-s3-cloudfront-smart-deploy@v1
        with:
          source: ./packages/front/dist
          target: s3://${{ steps.aws.outputs.S3 }}/
          distribution: ${{ steps.aws.outputs.CLOUDFRONT }}